import Data.Numbers.Primes
import Data.Ratio




--findI computes, for given k, the smallest i such that (k+i) `choose` k is >= 1000000
--use that k+i `choose` k = (k+(i-1)) `choose` k times (k+i/k)
findI :: Int -> Int
findI k = findI' (fromInteger 1) 0 where
           findI' c i = if c >= fromInteger 1000000 then i
                         else findI' (c*((k+i+1) % (i+1))) (i+1)



boundK :: Int -> Float
boundK k = let i = findI k 
               primes' = map (log . fromInteger) $ drop (1000000-k) primes
               pLow    = sum . take k $ primes'
               pHigh   = sum . take k . drop i $ primes'
            in exp (pHigh - pLow)



goodUpperBound :: Float
goodUpperBound = boundK 10


biggestPrime :: Int 
biggestPrime = let primes' = drop 999999 primes
                   pN      = head primes'
                   primes'' = dropWhile (< floor (fromInteger pN * goodUpperBound))
                in head primes''


optionalPrimes :: [Int]
optionalPrimes = [15483977,15483983,15483989,15483997,15484033,15484039,15484061,15484087,15484099,15484123,15484141,15484153,15484187,15484199,15484201,15484211,15484219,15484223,15484243,15484247,15484279,15484333,15484363,15484387,15484393,15484409,15484421,15484453,15484457,15484459,15484471,15484489,15484517,15484519,15484549,15484559,15484591,15484627,15484631,15484643,15484661,15484697,15484709,15484723,15484769,15484771,15484783,15484817,15484823,15484873,15484877,15484879,15484901,15484919,15484939,15484951,15484961,15484999,15485039,15485053,15485059,15485077,15485083,15485143,15485161,15485179,15485191,15485221,15485243,15485251,15485257,15485273,15485287,15485291,15485293,15485299,15485311,15485321,15485339,15485341,15485357,15485363,15485383,15485389,15485401,15485411,15485429,15485441,15485447,15485471,15485473,15485497,15485537,15485539,15485543,15485549,15485557,15485567,15485581,15485609,15485611,15485621,15485651,15485653,15485669,15485677,15485689,15485711,15485737,15485747,15485761,15485773,15485783,15485801,15485807,15485837,15485843,15485849,15485857,15485863,15485867,15485917,15485927,15485933,15485941,15485959,15485989,15485993,15486013,15486041,15486047,15486059,15486071,15486101,15486139,15486157,15486173,15486181,15486193,15486209,15486221,15486227,15486241,15486257,15486259,15486277,15486281,15486283,15486287,15486347,15486421,15486433,15486437,15486451,15486469,15486481,15486487,15486491,15486511,15486517,15486533,15486557,15486571,15486589,15486649,15486671,15486673,15486703,15486707,15486719,15486727,15486739,15486749,15486769,15486773,15486781,15486791,15486803,15486827,15486833,15486857,15486869,15486871,15486883,15486893,15486907,15486917,15486929,15486931,15486953,15486967,15486997,15487001,15487007,15487019,15487039,15487049,15487061,15487067,15487097,15487103,15487139,15487151,15487177,15487237,15487243,15487249,15487253,15487271,15487291,15487309,15487313,15487319,15487331,15487361,15487399,15487403,15487429,15487457,15487469,15487471,15487517,15487531,15487541,15487543,15487547,15487583,15487609,15487621,15487639,15487649,15487721,15487733,15487739,15487751]


